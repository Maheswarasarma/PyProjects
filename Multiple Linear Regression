""" Data

      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \
0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   
1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   
2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   
3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   
4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   

   PTRATIO       B  LSTAT  target  
0     15.3  396.90   4.98    24.0  
1     17.8  396.90   9.14    21.6  
2     17.8  392.83   4.03    34.7  
3     18.7  394.63   2.94    33.4  
4     18.7  396.90   5.33    36.2  


- create a datframe named as 'X' such that it includes all the feature columns and drop the target column.
- assign the 'target' columns to variiable Y


-Now the dataframe X has just the features that influence the target
-print the correlation matrix for dataframe X. Use '.corr()' function to compute correlation matrix
-from the correlation matrix note down the correlation value between 'CRIM' and 'PTRATIO' and assign it to variable 'corr_value'

-import stats model as sm
-initalize the OLS model with target Y and dataframe X(features), make sure you add constant to input X
-fit the model and print the summary


"""











from sklearn.datasets import load_boston
import pandas as pd
boston = load_boston()
dataset = pd.DataFrame(data=boston.data, columns=boston.feature_names)
dataset['target'] = boston.target
print(dataset.head())

from pandas import DataFrame
import matplotlib.pyplot as plt

 
df = DataFrame(dataset,columns=['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT','target'])
X= df[['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT']]

Y=df[['target']]

corr_values=X.corr()
print(corr_values)
corr_value=0.288250
plt.scatter(df['CRIM'], df['PTRATIO'], color='red')
plt.title('CRIM Vs PTRATIO', fontsize=14)
plt.xlabel('CRIM', fontsize=14)
plt.ylabel('PTRATIO', fontsize=14)
plt.grid(True)
plt.show()


import statsmodels.api as sm
X=sm.add_constant(X)
statsModel=sm.OLS(Y,X)
fittedModel=statsModel.fit()
print(fittedModel.summary())
